[alias]
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # List aliases
  aliases = config --get-regexp alias

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Push and track current branch to origin
  po = "!git push --set-upstream origin HEAD"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
	excludesfile = /Users/sleekybadger/.config/git/gitignore
  attributesfile = ~/.config/git/gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # http://www.git-tower.com/blog/make-git-rebase-safe-on-osx
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

  # Pipe diff-so-fancy with less
  pager = diff-so-fancy | less --tabs=4 -RFX

[color]
  ui = auto

[color "branch"]
  local = yellow
  remote = green
  current = yellow reverse

[color "diff"]
  meta = yellow
  frag = magenta bold
  commit = yellow bold
  old = red bold
  new = green bold
  whitespace = red reverse

[color "diff-highlight"]
  oldNormal = red bold
  newNormal = green bold
  oldHighlight = red bold 52
  newHighlight = green bold 22

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[commit]
  gpgsign = true
	template = /Users/sleekybadger/.stCommitMsg

[tag]
  forceSignAnnotated = true

[gpg]
  program = /usr/local/bin/gpg

[diff]
  renames = copies

[diff "bin"]
  textconv = hexdump -v -C

[diff "plist"]
  textconv = plutil -convert xml1 -o -

[help]
  autocorrect = 1

[merge]
  log = true

[push]
  # Make `git push` push to the upstream branch safely
  # https://git-scm.com/docs/git-config#git-config-pushdefault
  default = simple

  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"

# Include local config
[include]
  path = ~/.config/git/user.config
